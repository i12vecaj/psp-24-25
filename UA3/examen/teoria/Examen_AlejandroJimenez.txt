Responde de manera clara y concisa cada una de las siguientes preguntas. Justifica tus respuestas cuando sea necesario.Preguntas

1. Concepto de socket:
Explica qué es un socket en el contexto de la programación en red y qué elementos lo componen.

Un socket es una especie de canal por donde se trasmite informacion a traves de red.




2. Diferencias entre TCP y UDP:
Compara los sockets orientados a conexión (TCP) y los sockets no orientados a conexión (UDP). Indica al menos tres diferencias clave entre ellos.

Los sockets TCP es una forma de enviar informacion de manera que tiene que existir un receptor que de el visto bueno de que se va a realizar una comunicacion, y luego devolver ese visto bueno al emisor. Entonces si puede empezar el traspaso de informacion, si alguna parte, tanto el emisor como el receptor (llamados asi originalmente, ya que despues los dos son emisores y receptores) terminan la conexion, ya no es posible seguir con esa comunicacion.
Y los sockets UDP es otra forma de trasmitir informacion a traves de la red de manera que un dispositivo puede enviar informacion pero no necesariamente necesita estar "conenctado" con la otra parte, eso significa que se ha intentado mandar ese mensaje pero al no haber receptor no llega nunca. 






3. Creación de un socket TCP en Java:
Escribe un fragmento de código en Java que cree un socket TCP en el lado del cliente y establezca una conexión con un servidor en la IP 192.168.1.100 y el puerto 5000. Explica brevemente su funcionamiento.


public class ClienteSockets {  
    public static void main(String[] args) {  
        String direccionIP = "192.168.1.100";  
        int puerto = 5000;  
        
        try {  
            // Crea un socket y se conecta al servidor  
            Socket socket = new Socket(direccionIP, puerto);  
            System.out.println("Conectado al servidor en " + direccionIP + " en el puerto " + puerto);  
            
            // Aquí puedes enviar o recibir datos  
            
            // Cerrar el socket cuando termines  
            socket.close();  
        } catch (IOException e) {  
            System.out.println("Error al conectar: " + e.getMessage());  
        }  
    }  
}

Dentro del metodo main declaramos un String con la direccion IP y un integer con el numero del puerto. He creado un try para instanciar un socket con los parametros de la ip y el puerto, y luego que pasado por consola el mensaje de conectandose a esa direccion y ese puerto. 
Luego entremedias se puede pasar lo que queramos pasarle.
Finalmente cerramos el socket con .close() y sino es posible por alguna razon conectarse a esa direccion ip o ese puerto que escriba por consola un error al conectar.






4. Transferencia de objetos en TCP:
Explica cómo se pueden enviar y recibir objetos a través de sockets TCP en Java. Menciona qué clases o mecanismos son necesarios para lograrlo.


Para enviar y recibir objetos a través de sockets TCP en Java, hay que utilizar las clases `ObjectOutputStream` y `ObjectInputStream`. 

Primero, debes crear un socket en el lado del cliente y del servidor. En el servidor primero hay que crear un socket servidor que escuche en un puerto específico, luego hay que aceptar una conexión con `accept()` que devuelve un Socket. Luego crear un `ObjectOutputStream` a partir del socket para enviar cosas. Y por último usarlo para enviar el objeto.
En el cliente, creamos un socket para conectarte al servidor. Luego creamos un `ObjectInputStream` a partir del socket para recibir objetos. Y por último usar el `ObjectInputStream` para leer el objeto enviado por el servidor.
Hay que implementar la interfaz Serialize para poder mandarlo en un formato que se pueda enviar a través de la red.







5. Transferencia de objetos en UDP:
¿Cómo se pueden transferir objetos utilizando sockets UDP? ¿Qué limitaciones presenta este enfoque en comparación con TCP?


Para transferir objetos usando sockets UDP, primero hay que convertir el objeto en un formato como JSON o binario. Luego, el objeto se divide en partes más pequeñas si es necesario, y cada parte se envía a través de la red utilizando sockets UDP.

Las limitaciones de usar UDP en comparación con TCP son:

1. UDP no asegura que los paquetes lleguen a su destino. Algunos pueden perderse durante la transmisión.
2. Los paquetes pueden llegar en un orden diferente al que se enviaron
3. En UDP, no hay mecanismos para controlar la velocidad de envío por lo que se puede saturar la red.
4. UDP es un protocolo sin conexión, por lo que no hay un establecimiento de conexión previa entre el emisor y el receptor.







6. Multicast:
Explica qué es el multicast en redes y cómo se implementa en Java utilizando sockets. ¿En qué situaciones es útil esta técnica?


El multicast es una forma de comunicación en redes que permite enviar a múltiples destinatarios al mismo tiempo. En vez de enviar de forma individual, un solo mensaje se envía a un grupo de dispositivos que necesitan recibirlo.

En Java se puede implementar utilizando sockets multicast. Para eso hay que utilizan las clases `MulticastSocket` e `InetAddress`. Primero, se crea un socket multicast y se liga a una dirección IP de multicast. Luego, se envían datos a esta dirección, y todos los dispositivos que se han unido a ese grupo de multicast recibirán el mensaje.

El multicast es útil en situaciones como juegos en línea donde varios jugadores necesitan recibir información del mismo sitio.







7. Modelo Cliente-Servidor:
Describe el modelo Cliente-Servidor utilizando sockets. Explica cómo funciona la comunicación entre ambos y menciona un caso de uso donde este modelo sea imprescindible.


El modelo Cliente-Servidor es una forma de organizar la comunicación entre dos programas en una red
La comunicación funciona así: el cliente envía una solicitud a través de su socket al servidor. El servidor recibe esta solicitud, la procesa y envía una respuesta de vuelta al cliente.





8. Diferencias entre comunicación síncrona y asíncrona:
Explica la diferencia entre la comunicación síncrona y asíncrona en el contexto de los sockets. Proporciona un ejemplo de cada una.


La comunicación síncrona existe cuando dos partes se comunican de forma online, es decir, ambas necesitan estar conectadas al mismo tiempo. Por ejemplo en un chat en línea cuando una persona envía un mensaje, la otra persona lo recibe y puede responder de inmediato.
La comunicación asíncrona significa que puede haber una comunicacion de ambas partes sin necesidad de estar conectadas en linea simultaneamente.
Una parte puede enviar un mensaje y la otra lo recibe más tarde. Un ejemplo puede ser el correo electrónico, donde mandas un mensaje y el destinatario lo lee cuando quiera.
En el contexto de los sockets, un socket síncrono esperará hasta que se reciba un mensaje antes de seguir, mientras que un socket asíncrono puede seguir haciendo sus cosas mientras espera respuesta.






9. Seguridad en la comunicación con sockets:
Menciona tres medidas de seguridad que se deben considerar al utilizar sockets para la comunicación en red.

1. Cifrado de datos: Utilizar protocolos como TLS/SSL para proteger la información que se envía a través de los sockets
2. Autenticación: Implementar un sistema de verificacion o algo similar para asegurar que solo los usuarios puedan conectarse y comunicarse.
3. Uso de firewalls: Configurar firewalls para controlar el tráfico de red y permitir solo las conexiones necesarias, bloqueando accesos no deseados.






10. Caso práctico - Elección de protocolo:
Imagina que debes desarrollar una aplicación en red para un juego multijugador en tiempo real. ¿Qué protocolo (TCP o UDP) elegirías para la comunicación entre los jugadores y por qué?

Utilizaria un protocolo TCP, ya que al ser una red online necesitamos que los jugadores esten conectados a nuestro videojuego recibiendo informacion constante. Ya que como he explicado antes el protocolo TCP necesita que los usuarios esten conectados si o si a la red para poder hacer ese traspaso de informacion en linea
